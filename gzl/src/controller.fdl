#include "inst_parser.fdl"

dp controller(
	in inst                : ns(32);
    in alu_res             : tc(32);	
	in reg_b               : tc(32);
    in bus_datardy         : ns(1);
	out jmp                : ns(1);
	out jlt                : ns(1);
	out jgt                : ns(1);
	out alu_op             : ns(1);
	out alu_sel            : ns(2);
	out load               : ns(1);
	out store              : ns(1);
	out rw_addr            : ns(3);
	out rw_data            : ns(32);
	out rw_flag            : ns(1);
	out target             : ns(28);
	out reg_asel, reg_bsel : ns(3);
  out wait               : ns(1)) {

  sig opcode             : ns(4);
  sig set, cmp, mov      : ns(1);
  sig imm                : ns(24);
  sig r1, r2, r3         : ns(32);

  use inst_parser(inst,
        opcode, r1, r2, r3, imm, target);
	//use inst_parser(inst, alu_res, set, cmp, mov, load, alu_op, reg_b,
	//        opcode, rw_addr, rw_data, rw_flag, imm_val, target,
	//        reg_asel, reg_bsel);

	always {
		jmp     = opcode == 0b1100;
		jlt     = opcode == 0b1101;
		jgt     = opcode == 0b1110;

		load    = opcode == 0b1000;
		store   = opcode == 0b1001;

		set     = opcode == 0b0100;
		cmp     = opcode == 0b0110;
		mov     = opcode == 0b0111;

	  rw_addr = r1;
	  rw_data = mov ? reg_b :
	            set ? imm :
	            alu_op ? alu_res : 0;
	  rw_flag = ~cmp & (set | mov | alu_op | load);
	  reg_asel = (alu_op & ~cmp) ? r2 : r1;
	  reg_bsel = (alu_op & ~cmp) ? r3 : r2;        

	    // do alu sub for comparisons
		alu_op  = opcode <  0b0100 | cmp;
        //00 = add, 01 = sub, 10 = mul, 11 = div
		alu_sel = cmp ? 0b01 : opcode[0:1];

        wait    = (store | load) & ~bus_datardy;
	}
}
